
import re
from unicodedata import ucd_3_2_0 as unicodedata

def gen_category(cats):
    for i in range(0, 1114112):
        if (unicodedata.category(chr(i)) in cats):
            (yield i)

def gen_bidirectional(cats):
    for i in range(0, 1114112):
        if (unicodedata.bidirectional(chr(i)) in cats):
            (yield i)

def compact_set(l):
    single = []
    tuple = []
    prev = None
    span = 0
    for e in l:
        if (prev is None):
            prev = e
            span = 0
            continue
        if (((prev + span) + 1) != e):
            if (span > 2):
                tuple.append((prev, ((prev + span) + 1)))
            else:
                for i in range(prev, ((prev + span) + 1)):
                    single.append(i)
            prev = e
            span = 0
        else:
            span += 1
    if span:
        tuple.append((prev, ((prev + span) + 1)))
    else:
        single.append(prev)
    if ((not single) and (len(tuple) == 1)):
        tuple = ('range(%d,%d)' % tuple[0])
    else:
        tuple = ' + '.join((('list(range(%d,%d))' % t) for t in tuple))
    if (not single):
        return ('set(%s)' % tuple)
    if (not tuple):
        return ('set(%r)' % (single,))
    return ('set(%r + %s)' % (single, tuple))
with open('rfc3454.txt') as f:
    data = f.readlines()
tables = []
curname = None
for l in data:
    l = l.strip()
    if (not l):
        continue
    if l.startswith(('Hoffman & Blanchet', 'RFC 3454')):
        continue
    m = re.match('----- (Start|End) Table ([A-Z](.[0-9])+) -----', l)
    if m:
        if (m.group(1) == 'Start'):
            if curname:
                raise RuntimeError('Double Start', (curname, l))
            curname = m.group(2)
            table = {}
            tables.append((curname, table))
            continue
        else:
            if (not curname):
                raise RuntimeError('End without start', l)
            if (curname != m.group(2)):
                raise RuntimeError('Unexpected end', l)
            curname = None
            continue
    if (not curname):
        continue
    fields = l.split(';')
    if (len(fields) > 1):
        fields = fields[:(- 1)]
    if (len(fields) == 1):
        fields = fields[0].split('-')
        if (len(fields) > 1):
            try:
                (start, end) = fields
            except ValueError:
                raise RuntimeError('Unpacking problem', l)
        else:
            start = end = fields[0]
        start = int(start, 16)
        end = int(end, 16)
        for i in range(start, (end + 1)):
            table[i] = i
    else:
        (code, value) = fields
        value = value.strip()
        if value:
            value = [int(v, 16) for v in value.split(' ')]
        else:
            value = None
        table[int(code, 16)] = value
print('# This file is generated by mkstringprep.py. DO NOT EDIT.\n"""Library that exposes various tables found in the StringPrep RFC 3454.\n\nThere are two kinds of tables: sets, for which a member test is provided,\nand mappings, for which a mapping function is provided.\n"""\n\nfrom unicodedata import ucd_3_2_0 as unicodedata\n')
print(('assert unicodedata.unidata_version == %r' % (unicodedata.unidata_version,)))
(name, table) = tables[0]
del tables[0]
assert (name == 'A.1')
table = set(table.keys())
Cn = set(gen_category(['Cn']))
Cn -= set(range(64976, 65008))
Cn -= set(range(65534, 1114112, 65536))
Cn -= set(range(65535, 1114112, 65536))
print("\ndef in_table_a1(code):\n    if unicodedata.category(code) != 'Cn': return False\n    c = ord(code)\n    if 0xFDD0 <= c < 0xFDF0: return False\n    return (c & 0xFFFF) not in (0xFFFE, 0xFFFF)\n")
(name, table) = tables[0]
del tables[0]
assert (name == 'B.1')
table = sorted(table.keys())
print((('\nb1_set = ' + compact_set(table)) + '\ndef in_table_b1(code):\n    return ord(code) in b1_set\n'))
(name, table_b2) = tables[0]
del tables[0]
assert (name == 'B.2')
(name, table_b3) = tables[0]
del tables[0]
assert (name == 'B.3')
b3_exceptions = {}
for (k, v) in table_b2.items():
    if (list(map(ord, chr(k).lower())) != v):
        b3_exceptions[k] = ''.join(map(chr, v))
b3 = sorted(b3_exceptions.items())
print('\nb3_exceptions = {')
for (i, kv) in enumerate(b3):
    print(('0x%x:%a,' % kv), end=' ')
    if ((i % 4) == 3):
        print()
print('}')
print('\ndef map_table_b3(code):\n    r = b3_exceptions.get(ord(code))\n    if r is not None: return r\n    return code.lower()\n')

def map_table_b3(code):
    r = b3_exceptions.get(ord(code))
    if (r is not None):
        return r
    return code.lower()

def map_table_b2(a):
    al = map_table_b3(a)
    b = unicodedata.normalize('NFKC', al)
    bl = ''.join([map_table_b3(ch) for ch in b])
    c = unicodedata.normalize('NFKC', bl)
    if (b != c):
        return c
    else:
        return al
specials = {}
for (k, v) in table_b2.items():
    if (list(map(ord, map_table_b2(chr(k)))) != v):
        specials[k] = v
assert (specials == {})
print('\ndef map_table_b2(a):\n    al = map_table_b3(a)\n    b = unicodedata.normalize("NFKC", al)\n    bl = "".join([map_table_b3(ch) for ch in b])\n    c = unicodedata.normalize("NFKC", bl)\n    if b != c:\n        return c\n    else:\n        return al\n')
(name, table) = tables[0]
del tables[0]
assert (name == 'C.1.1')
assert (table == {32: 32})
print('\ndef in_table_c11(code):\n    return code == " "\n')
(name, table) = tables[0]
del tables[0]
assert (name == 'C.1.2')
print('\ndef in_table_c12(code):\n    return unicodedata.category(code) == "Zs" and code != " "\n\ndef in_table_c11_c12(code):\n    return unicodedata.category(code) == "Zs"\n')
(name, table_c21) = tables[0]
del tables[0]
assert (name == 'C.2.1')
Cc = set(gen_category(['Cc']))
Cc_ascii = (Cc & set(range(128)))
table_c21 = set(table_c21.keys())
assert (Cc_ascii == table_c21)
print('\ndef in_table_c21(code):\n    return ord(code) < 128 and unicodedata.category(code) == "Cc"\n')
(name, table_c22) = tables[0]
del tables[0]
assert (name == 'C.2.2')
Cc_nonascii = (Cc - Cc_ascii)
table_c22 = set(table_c22.keys())
assert (len((Cc_nonascii - table_c22)) == 0)
specials = list((table_c22 - Cc_nonascii))
specials.sort()
print((('c22_specials = ' + compact_set(specials)) + '\ndef in_table_c22(code):\n    c = ord(code)\n    if c < 128: return False\n    if unicodedata.category(code) == "Cc": return True\n    return c in c22_specials\n\ndef in_table_c21_c22(code):\n    return unicodedata.category(code) == "Cc" or \\\n           ord(code) in c22_specials\n'))
(name, table) = tables[0]
del tables[0]
assert (name == 'C.3')
Co = set(gen_category(['Co']))
assert (set(table.keys()) == Co)
print('\ndef in_table_c3(code):\n    return unicodedata.category(code) == "Co"\n')
(name, table) = tables[0]
del tables[0]
assert (name == 'C.4')
nonchar = set(range(64976, 65008))
nonchar.update(range(65534, 1114112, 65536))
nonchar.update(range(65535, 1114112, 65536))
table = set(table.keys())
assert (table == nonchar)
print('\ndef in_table_c4(code):\n    c = ord(code)\n    if c < 0xFDD0: return False\n    if c < 0xFDF0: return True\n    return (ord(code) & 0xFFFF) in (0xFFFE, 0xFFFF)\n')
(name, table) = tables[0]
del tables[0]
assert (name == 'C.5')
Cs = set(gen_category(['Cs']))
assert (set(table.keys()) == Cs)
print('\ndef in_table_c5(code):\n    return unicodedata.category(code) == "Cs"\n')
(name, table) = tables[0]
del tables[0]
assert (name == 'C.6')
table = sorted(table.keys())
print((('\nc6_set = ' + compact_set(table)) + '\ndef in_table_c6(code):\n    return ord(code) in c6_set\n'))
(name, table) = tables[0]
del tables[0]
assert (name == 'C.7')
table = sorted(table.keys())
print((('\nc7_set = ' + compact_set(table)) + '\ndef in_table_c7(code):\n    return ord(code) in c7_set\n'))
(name, table) = tables[0]
del tables[0]
assert (name == 'C.8')
table = sorted(table.keys())
print((('\nc8_set = ' + compact_set(table)) + '\ndef in_table_c8(code):\n    return ord(code) in c8_set\n'))
(name, table) = tables[0]
del tables[0]
assert (name == 'C.9')
table = sorted(table.keys())
print((('\nc9_set = ' + compact_set(table)) + '\ndef in_table_c9(code):\n    return ord(code) in c9_set\n'))
(name, table) = tables[0]
del tables[0]
assert (name == 'D.1')
RandAL = set(gen_bidirectional(['R', 'AL']))
assert (set(table.keys()) == RandAL)
print('\ndef in_table_d1(code):\n    return unicodedata.bidirectional(code) in ("R","AL")\n')
(name, table) = tables[0]
del tables[0]
assert (name == 'D.2')
L = set(gen_bidirectional(['L']))
assert (set(table.keys()) == L)
print('\ndef in_table_d2(code):\n    return unicodedata.bidirectional(code) == "L"\n')
