
import sys
import tokenize
header = '\n/* Auto-generated by Tools/scripts/generate_opcode_h.py from Lib/opcode.py */\n#ifndef Py_OPCODE_H\n#define Py_OPCODE_H\n#ifdef __cplusplus\nextern "C" {\n#endif\n\n\n    /* Instruction opcodes for compiled code */\n'.lstrip()
footer = '\n/* EXCEPT_HANDLER is a special, implicit block type which is created when\n   entering an except handler. It is not an opcode but we define it here\n   as we want it to be available to both frameobject.c and ceval.c, while\n   remaining private.*/\n#define EXCEPT_HANDLER 257\n\n#define HAS_ARG(op) ((op) >= HAVE_ARGUMENT)\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* !Py_OPCODE_H */\n'
UINT32_MASK = ((1 << 32) - 1)

def write_int_array_from_ops(name, ops, out):
    bits = 0
    for op in ops:
        bits |= (1 << op)
    out.write(f'''static uint32_t {name}[8] = {{
''')
    for i in range(8):
        out.write(f'''    {(bits & UINT32_MASK)}U,
''')
        bits >>= 32
    assert (bits == 0)
    out.write(f'''}};
''')

def main(opcode_py, outfile='Include/opcode.h'):
    opcode = {}
    if hasattr(tokenize, 'open'):
        fp = tokenize.open(opcode_py)
    else:
        fp = open(opcode_py)
    with fp:
        code = fp.read()
    exec(code, opcode)
    opmap = opcode['opmap']
    hasjrel = opcode['hasjrel']
    hasjabs = opcode['hasjabs']
    with open(outfile, 'w') as fobj:
        fobj.write(header)
        for name in opcode['opname']:
            if (name in opmap):
                fobj.write(('#define %-23s %3s\n' % (name, opmap[name])))
            if (name == 'POP_EXCEPT'):
                fobj.write(('#define %-23s %3d\n' % ('HAVE_ARGUMENT', opcode['HAVE_ARGUMENT'])))
        fobj.write('#ifdef NEED_OPCODE_JUMP_TABLES\n')
        write_int_array_from_ops('_PyOpcode_RelativeJump', opcode['hasjrel'], fobj)
        write_int_array_from_ops('_PyOpcode_Jump', (opcode['hasjrel'] + opcode['hasjabs']), fobj)
        fobj.write('#endif /* OPCODE_TABLES */\n')
        fobj.write(footer)
    print(('%s regenerated from %s' % (outfile, opcode_py)))
if (__name__ == '__main__'):
    main(sys.argv[1], sys.argv[2])
